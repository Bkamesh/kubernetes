apiVersion: apps/v1
kind: Deployment 
metadata:
  name: grafana-pod
  namespace: devops
spec:
  replicas: 1
  selector:
     matchLabels:
       app: grafana
  template:
    metadata:
     labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:11.5.2-ubuntu
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
          env:
            # - name: GF_SECURITY_ADMIN_USER
            #   value: admin
            # - name: GF_SECURITY_ADMIN_PASSWORD
            #   value: admin
            - name: GF_LOG_LEVEL
              value: "debug"
            - name: GF_DATABASE_TYPE
              value: "postgres"
            - name: GF_DATABASE_HOST
              value: "postgres-service.database.svc.cluster.local:40000"
            - name: GF_DATABASE_NAME
              value: "grafana_metadatabase"  
            - name: GF_DATABASE_USER
              value: kamesh 
            - name: GF_DATABASE_PASSWORD
              value: kcalb@020
          livenessProbe:
              httpGet:
                path: /health
                port: 3000  
              initialDelaySeconds: 300  
              periodSeconds: 30 
              timeoutSeconds: 10 
              failureThreshold: 6 
          readinessProbe:
              httpGet:
                path: /live
                port: 3000  
              initialDelaySeconds: 90
              periodSeconds: 30  
              timeoutSeconds: 10 
              failureThreshold: 6  
          resources:
            requests:
               cpu: 100m
               memory: 100Mi
            limits:
               cpu: 300m
               memory: 500Mi
---
apiVersion: v1 
kind: Service 
metadata:
  name: grafana-service
  namespace: devops
spec:
  selector: 
    app: grafana
  ports: 
    - protocol: TCP
      name: http 
      port: 3100
      targetPort: 3000
  type: LoadBalancer